import streamlit as st
import tensorflow as tf
import numpy as np
import pandas as pd
from PIL import Image

# -----------------------------------------------------------
# CONFIGURATION DE L'APPLICATION
# -----------------------------------------------------------

st.set_page_config(
    page_title="üçé Fruit Classifier - IA",
    page_icon="üçå",
    layout="centered"
)

st.title("üçâ Fruit Classifier - D√©tection automatique")
st.write("Glissez-d√©posez une photo d‚Äôun fruit ci-dessous pour d√©couvrir dans quel √©tat est le fruit! üçäüçèüçí")

# -----------------------------------------------------------
# üì¶ CHARGEMENT DU MOD√àLE
# -----------------------------------------------------------

@st.cache_resource
def load_model():
    try:
        model = tf.keras.models.load_model("fruit_classifier.keras")
        return model
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le : {e}")
        st.error("Assurez-vous que le fichier 'fruit_classifier.keras' se trouve dans le m√™me dossier que votre script app.py")
        return None

model = load_model()

# Liste des classes (DOIT correspondre √† l'entra√Ænement)
CLASS_NAMES = ["fresh", "mild", "rotten"] 

IMG_SIZE = (224, 224) # Doit √™tre le m√™me que l'entra√Ænement

# -----------------------------------------------------------
# T√âL√âVERSEMENT DE L‚ÄôIMAGE
# -----------------------------------------------------------

uploaded_file = st.file_uploader(
    "Glissez une image ici ou cliquez pour en choisir une üìÅ",
    type=["jpg", "jpeg", "png"]
)

if uploaded_file is not None and model is not None:
    # Affichage de l‚Äôimage t√©l√©charg√©e
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="üñºÔ∏è Image t√©l√©charg√©e", use_container_width=True)

    # Pr√©traitement (m√™mes param√®tres que pendant l'entra√Ænement)
    img_resized = image.resize(IMG_SIZE)
    img_array = tf.keras.utils.img_to_array(img_resized)
    img_array = np.expand_dims(img_array, axis=0) # Cr√©e un batch de 1 image

    # -----------------------------------------------------------
    # PR√âDICTION
    # -----------------------------------------------------------

    with st.spinner("Analyse de l‚Äôimage... üß†"):
        predictions = model.predict(img_array)
        scores = tf.nn.softmax(predictions[0]).numpy()

    pred_class = CLASS_NAMES[np.argmax(scores)]
    confidence = np.max(scores)

    # -----------------------------------------------------------
    # AFFICHAGE DU R√âSULTAT
    # -----------------------------------------------------------

    st.markdown("---")
    st.subheader("R√©sultat de la pr√©diction üß†")

    # Affichage plus dynamique
    if pred_class == "fresh":
        st.success(f"**√âtat du fruit : {pred_class.capitalize()}** (Confiance : {confidence:.2%}) ")
    elif pred_class == "mild":
        st.warning(f"**√âtat du fruit : {pred_class.capitalize()}** (Confiance : {confidence:.2%}) ")
    else: # rotten
        st.error(f"**√âtat du fruit : {pred_class.capitalize()}** (Confiance : {confidence:.2%}) ")
        
    st.write("Le mod√®le est confiant √† **{:.2f}%** que ce fruit est **{}**.".format(confidence * 100, pred_class))


    # -----------------------------------------------------------
    # VISUALISATION DES PROBABILIT√âS (D√©comment√© et am√©lior√©)
    # -----------------------------------------------------------

    st.subheader("D√©tail des probabilit√©s")

    # Cr√©er un DataFrame pour un affichage facile
    prob_df = pd.DataFrame({
        "Classe": CLASS_NAMES,
        "Probabilit√©": scores
    })
    
    # Utiliser st.bar_chart pour un graphique interactif simple
    st.bar_chart(prob_df.set_index("Classe"))

elif model is None:
    st.error("Le mod√®le n'a pas pu √™tre charg√©. L'application ne peut pas fonctionner.")

else:
    st.info("‚¨ÜÔ∏è Importez une image pour commencer la pr√©diction.")

# -----------------------------------------------------------
# FOOTER
# -----------------------------------------------------------
st.markdown("---")
st.caption("Application cr√©√©e par Yann et T√©o.")